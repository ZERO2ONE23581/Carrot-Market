generator client {
  provider = "prisma-client-js"
  previewFeatures=["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id                Int         @id @default(autoincrement())
  tokens            Token[]
  products          Product[]
  favorites         Favorites[]
  post              Post[]
  answer            Answer[]
  wondering         Wondering[]
  writtenReviews    Review[]  @relation(name:"writtenReviews") 
  receivedReviews   Review[]  @relation(name:"receivedReviews")
  sales             Sale[]
  purchases         Purchase[]
  record            Record[]
  name              String
  phone             String?     @unique
  email             String?     @unique
  avatar            String?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

model Token {  
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         Int   
  id             Int         @id @default(autoincrement())
  payload        String      @unique
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

model Product { 
  id            Int         @id @default(autoincrement())
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  favorites     Favorites[]
  sales         Sale[]
  purchases     Purchase[]
  record        Record[]
  image         String      @db.MediumText
  name          String
  price         Int
  description   String      @db.MediumText  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}
// 데이터베이스는 텍스트 길이에 제한을 둔다. (그대로 두면 길이는 mysql의 normal varchar인 191자이다.)
// 데이터베이스에 그냥 string으로 하면 용량제한이 걸려서 위와 같이 @db.MeduimText로 해준다.

model Post {
  id            Int         @id @default(autoincrement())
  answer        Answer[]
  wondering     Wondering[]
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  question      String      @db.MediumText
  latitude      Float?
  longitude     Float?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Answer {
  id            Int       @id @default(autoincrement())
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  post          Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId        Int
  text          String    @db.MediumText
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Wondering {
  id            Int       @id @default(autoincrement())
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  post          Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId        Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Review {
  id                Int       @id @default(autoincrement())
  createBy          User      @relation(name:"writtenReviews", fields: [createById], references: [id], onDelete: Cascade)
  createById        Int
  createdFor        User      @relation(name:"receivedReviews", fields: [createdForId], references: [id], onDelete: Cascade)
  createdForId      Int
  text              String    @db.MediumText
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}
//리뷰를 쓴사람과 리뷰를 받은사람을 위해 중복된 모델을 넣을땐 name을 이용하여 구분한다.


model Sale {
  id            Int       @id @default(autoincrement())
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  product       Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId     Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Purchase {
  id            Int       @id @default(autoincrement())
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  product       Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId     Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Favorites {
  id            Int       @id @default(autoincrement())
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  product       Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId     Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Record {
  id            Int       @id @default(autoincrement())
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        Int
  product       Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId     Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  kind          Kind
}

enum Kind {
  Purchase
  Sale
  Favorites
}